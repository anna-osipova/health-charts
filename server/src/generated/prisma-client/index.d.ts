// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>;
  runningWorkout: (where?: RunningWorkoutWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  runningWorkout: (
    where: RunningWorkoutWhereUniqueInput
  ) => RunningWorkoutPromise;
  runningWorkouts: (
    args?: {
      where?: RunningWorkoutWhereInput;
      orderBy?: RunningWorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RunningWorkout>;
  runningWorkoutsConnection: (
    args?: {
      where?: RunningWorkoutWhereInput;
      orderBy?: RunningWorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RunningWorkoutConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRunningWorkout: (
    data: RunningWorkoutCreateInput
  ) => RunningWorkoutPromise;
  updateRunningWorkout: (
    args: {
      data: RunningWorkoutUpdateInput;
      where: RunningWorkoutWhereUniqueInput;
    }
  ) => RunningWorkoutPromise;
  updateManyRunningWorkouts: (
    args: {
      data: RunningWorkoutUpdateManyMutationInput;
      where?: RunningWorkoutWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRunningWorkout: (
    args: {
      where: RunningWorkoutWhereUniqueInput;
      create: RunningWorkoutCreateInput;
      update: RunningWorkoutUpdateInput;
    }
  ) => RunningWorkoutPromise;
  deleteRunningWorkout: (
    where: RunningWorkoutWhereUniqueInput
  ) => RunningWorkoutPromise;
  deleteManyRunningWorkouts: (
    where?: RunningWorkoutWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  runningWorkout: (
    where?: RunningWorkoutSubscriptionWhereInput
  ) => RunningWorkoutSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RunningWorkoutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "totalDistance_ASC"
  | "totalDistance_DESC"
  | "totalDistanceUnit_ASC"
  | "totalDistanceUnit_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "durationUnit_ASC"
  | "durationUnit_DESC"
  | "totalEnergyBurned_ASC"
  | "totalEnergyBurned_DESC"
  | "totalEnergyBurnedUnit_ASC"
  | "totalEnergyBurnedUnit_DESC"
  | "totalAscent_ASC"
  | "totalAscent_DESC"
  | "totalAscentUnit_ASC"
  | "totalAscentUnit_DESC"
  | "sourceName_ASC"
  | "sourceName_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type RunningWorkoutWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RunningWorkoutWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  totalDistance?: Float;
  totalDistance_not?: Float;
  totalDistance_in?: Float[] | Float;
  totalDistance_not_in?: Float[] | Float;
  totalDistance_lt?: Float;
  totalDistance_lte?: Float;
  totalDistance_gt?: Float;
  totalDistance_gte?: Float;
  totalDistanceUnit?: String;
  totalDistanceUnit_not?: String;
  totalDistanceUnit_in?: String[] | String;
  totalDistanceUnit_not_in?: String[] | String;
  totalDistanceUnit_lt?: String;
  totalDistanceUnit_lte?: String;
  totalDistanceUnit_gt?: String;
  totalDistanceUnit_gte?: String;
  totalDistanceUnit_contains?: String;
  totalDistanceUnit_not_contains?: String;
  totalDistanceUnit_starts_with?: String;
  totalDistanceUnit_not_starts_with?: String;
  totalDistanceUnit_ends_with?: String;
  totalDistanceUnit_not_ends_with?: String;
  duration?: Float;
  duration_not?: Float;
  duration_in?: Float[] | Float;
  duration_not_in?: Float[] | Float;
  duration_lt?: Float;
  duration_lte?: Float;
  duration_gt?: Float;
  duration_gte?: Float;
  durationUnit?: String;
  durationUnit_not?: String;
  durationUnit_in?: String[] | String;
  durationUnit_not_in?: String[] | String;
  durationUnit_lt?: String;
  durationUnit_lte?: String;
  durationUnit_gt?: String;
  durationUnit_gte?: String;
  durationUnit_contains?: String;
  durationUnit_not_contains?: String;
  durationUnit_starts_with?: String;
  durationUnit_not_starts_with?: String;
  durationUnit_ends_with?: String;
  durationUnit_not_ends_with?: String;
  totalEnergyBurned?: Float;
  totalEnergyBurned_not?: Float;
  totalEnergyBurned_in?: Float[] | Float;
  totalEnergyBurned_not_in?: Float[] | Float;
  totalEnergyBurned_lt?: Float;
  totalEnergyBurned_lte?: Float;
  totalEnergyBurned_gt?: Float;
  totalEnergyBurned_gte?: Float;
  totalEnergyBurnedUnit?: String;
  totalEnergyBurnedUnit_not?: String;
  totalEnergyBurnedUnit_in?: String[] | String;
  totalEnergyBurnedUnit_not_in?: String[] | String;
  totalEnergyBurnedUnit_lt?: String;
  totalEnergyBurnedUnit_lte?: String;
  totalEnergyBurnedUnit_gt?: String;
  totalEnergyBurnedUnit_gte?: String;
  totalEnergyBurnedUnit_contains?: String;
  totalEnergyBurnedUnit_not_contains?: String;
  totalEnergyBurnedUnit_starts_with?: String;
  totalEnergyBurnedUnit_not_starts_with?: String;
  totalEnergyBurnedUnit_ends_with?: String;
  totalEnergyBurnedUnit_not_ends_with?: String;
  totalAscent?: Float;
  totalAscent_not?: Float;
  totalAscent_in?: Float[] | Float;
  totalAscent_not_in?: Float[] | Float;
  totalAscent_lt?: Float;
  totalAscent_lte?: Float;
  totalAscent_gt?: Float;
  totalAscent_gte?: Float;
  totalAscentUnit?: String;
  totalAscentUnit_not?: String;
  totalAscentUnit_in?: String[] | String;
  totalAscentUnit_not_in?: String[] | String;
  totalAscentUnit_lt?: String;
  totalAscentUnit_lte?: String;
  totalAscentUnit_gt?: String;
  totalAscentUnit_gte?: String;
  totalAscentUnit_contains?: String;
  totalAscentUnit_not_contains?: String;
  totalAscentUnit_starts_with?: String;
  totalAscentUnit_not_starts_with?: String;
  totalAscentUnit_ends_with?: String;
  totalAscentUnit_not_ends_with?: String;
  sourceName?: String;
  sourceName_not?: String;
  sourceName_in?: String[] | String;
  sourceName_not_in?: String[] | String;
  sourceName_lt?: String;
  sourceName_lte?: String;
  sourceName_gt?: String;
  sourceName_gte?: String;
  sourceName_contains?: String;
  sourceName_not_contains?: String;
  sourceName_starts_with?: String;
  sourceName_not_starts_with?: String;
  sourceName_ends_with?: String;
  sourceName_not_ends_with?: String;
  AND?: RunningWorkoutWhereInput[] | RunningWorkoutWhereInput;
  OR?: RunningWorkoutWhereInput[] | RunningWorkoutWhereInput;
  NOT?: RunningWorkoutWhereInput[] | RunningWorkoutWhereInput;
}

export interface PostCreateInput {
  published?: Boolean;
  title: String;
  content: String;
}

export interface PostUpdateInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface RunningWorkoutCreateInput {
  email: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  totalDistance: Float;
  totalDistanceUnit?: String;
  duration: Float;
  durationUnit?: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit?: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutUpdateInput {
  email?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  totalDistance?: Float;
  totalDistanceUnit?: String;
  duration?: Float;
  durationUnit?: String;
  totalEnergyBurned?: Float;
  totalEnergyBurnedUnit?: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutUpdateManyMutationInput {
  email?: String;
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  totalDistance?: Float;
  totalDistanceUnit?: String;
  duration?: Float;
  durationUnit?: String;
  totalEnergyBurned?: Float;
  totalEnergyBurnedUnit?: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface RunningWorkoutSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RunningWorkoutWhereInput;
  AND?:
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput;
  OR?:
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput;
  NOT?:
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Post {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RunningWorkout {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutPromise
  extends Promise<RunningWorkout>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface RunningWorkoutSubscription
  extends Promise<AsyncIterator<RunningWorkout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

export interface RunningWorkoutConnection {}

export interface RunningWorkoutConnectionPromise
  extends Promise<RunningWorkoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RunningWorkoutEdge>>() => T;
  aggregate: <T = AggregateRunningWorkoutPromise>() => T;
}

export interface RunningWorkoutConnectionSubscription
  extends Promise<AsyncIterator<RunningWorkoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RunningWorkoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRunningWorkoutSubscription>() => T;
}

export interface RunningWorkoutEdge {
  cursor: String;
}

export interface RunningWorkoutEdgePromise
  extends Promise<RunningWorkoutEdge>,
    Fragmentable {
  node: <T = RunningWorkoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RunningWorkoutEdgeSubscription
  extends Promise<AsyncIterator<RunningWorkoutEdge>>,
    Fragmentable {
  node: <T = RunningWorkoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRunningWorkout {
  count: Int;
}

export interface AggregateRunningWorkoutPromise
  extends Promise<AggregateRunningWorkout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRunningWorkoutSubscription
  extends Promise<AsyncIterator<AggregateRunningWorkout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface RunningWorkoutSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RunningWorkoutSubscriptionPayloadPromise
  extends Promise<RunningWorkoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RunningWorkoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RunningWorkoutPreviousValuesPromise>() => T;
}

export interface RunningWorkoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RunningWorkoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RunningWorkoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RunningWorkoutPreviousValuesSubscription>() => T;
}

export interface RunningWorkoutPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutPreviousValuesPromise
  extends Promise<RunningWorkoutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface RunningWorkoutPreviousValuesSubscription
  extends Promise<AsyncIterator<RunningWorkoutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "RunningWorkout",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
