// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cyclingWorkout: (where?: CyclingWorkoutWhereInput) => Promise<boolean>;
  runningWorkout: (where?: RunningWorkoutWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cyclingWorkout: (
    where: CyclingWorkoutWhereUniqueInput
  ) => CyclingWorkoutNullablePromise;
  cyclingWorkouts: (args?: {
    where?: CyclingWorkoutWhereInput;
    orderBy?: CyclingWorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CyclingWorkout>;
  cyclingWorkoutsConnection: (args?: {
    where?: CyclingWorkoutWhereInput;
    orderBy?: CyclingWorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CyclingWorkoutConnectionPromise;
  runningWorkout: (
    where: RunningWorkoutWhereUniqueInput
  ) => RunningWorkoutNullablePromise;
  runningWorkouts: (args?: {
    where?: RunningWorkoutWhereInput;
    orderBy?: RunningWorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RunningWorkout>;
  runningWorkoutsConnection: (args?: {
    where?: RunningWorkoutWhereInput;
    orderBy?: RunningWorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RunningWorkoutConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCyclingWorkout: (
    data: CyclingWorkoutCreateInput
  ) => CyclingWorkoutPromise;
  updateCyclingWorkout: (args: {
    data: CyclingWorkoutUpdateInput;
    where: CyclingWorkoutWhereUniqueInput;
  }) => CyclingWorkoutPromise;
  updateManyCyclingWorkouts: (args: {
    data: CyclingWorkoutUpdateManyMutationInput;
    where?: CyclingWorkoutWhereInput;
  }) => BatchPayloadPromise;
  upsertCyclingWorkout: (args: {
    where: CyclingWorkoutWhereUniqueInput;
    create: CyclingWorkoutCreateInput;
    update: CyclingWorkoutUpdateInput;
  }) => CyclingWorkoutPromise;
  deleteCyclingWorkout: (
    where: CyclingWorkoutWhereUniqueInput
  ) => CyclingWorkoutPromise;
  deleteManyCyclingWorkouts: (
    where?: CyclingWorkoutWhereInput
  ) => BatchPayloadPromise;
  createRunningWorkout: (
    data: RunningWorkoutCreateInput
  ) => RunningWorkoutPromise;
  updateRunningWorkout: (args: {
    data: RunningWorkoutUpdateInput;
    where: RunningWorkoutWhereUniqueInput;
  }) => RunningWorkoutPromise;
  updateManyRunningWorkouts: (args: {
    data: RunningWorkoutUpdateManyMutationInput;
    where?: RunningWorkoutWhereInput;
  }) => BatchPayloadPromise;
  upsertRunningWorkout: (args: {
    where: RunningWorkoutWhereUniqueInput;
    create: RunningWorkoutCreateInput;
    update: RunningWorkoutUpdateInput;
  }) => RunningWorkoutPromise;
  deleteRunningWorkout: (
    where: RunningWorkoutWhereUniqueInput
  ) => RunningWorkoutPromise;
  deleteManyRunningWorkouts: (
    where?: RunningWorkoutWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cyclingWorkout: (
    where?: CyclingWorkoutSubscriptionWhereInput
  ) => CyclingWorkoutSubscriptionPayloadSubscription;
  runningWorkout: (
    where?: RunningWorkoutSubscriptionWhereInput
  ) => RunningWorkoutSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CyclingWorkoutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stravaId_ASC"
  | "stravaId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "totalDistance_ASC"
  | "totalDistance_DESC"
  | "totalDistanceUnit_ASC"
  | "totalDistanceUnit_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "durationUnit_ASC"
  | "durationUnit_DESC"
  | "totalEnergyBurned_ASC"
  | "totalEnergyBurned_DESC"
  | "totalEnergyBurnedUnit_ASC"
  | "totalEnergyBurnedUnit_DESC"
  | "totalAscent_ASC"
  | "totalAscent_DESC"
  | "totalAscentUnit_ASC"
  | "totalAscentUnit_DESC"
  | "sourceName_ASC"
  | "sourceName_DESC";

export type RunningWorkoutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stravaId_ASC"
  | "stravaId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "totalDistance_ASC"
  | "totalDistance_DESC"
  | "totalDistanceUnit_ASC"
  | "totalDistanceUnit_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "durationUnit_ASC"
  | "durationUnit_DESC"
  | "totalEnergyBurned_ASC"
  | "totalEnergyBurned_DESC"
  | "totalEnergyBurnedUnit_ASC"
  | "totalEnergyBurnedUnit_DESC"
  | "totalAscent_ASC"
  | "totalAscent_DESC"
  | "totalAscentUnit_ASC"
  | "totalAscentUnit_DESC"
  | "sourceName_ASC"
  | "sourceName_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "stravaId_ASC"
  | "stravaId_DESC"
  | "stravaUsername_ASC"
  | "stravaUsername_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "accessToken_ASC"
  | "accessToken_DESC"
  | "refreshToken_ASC"
  | "refreshToken_DESC"
  | "accessTokenExpiresAt_ASC"
  | "accessTokenExpiresAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CyclingWorkoutWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CyclingWorkoutWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stravaId?: Maybe<String>;
  stravaId_not?: Maybe<String>;
  stravaId_in?: Maybe<String[] | String>;
  stravaId_not_in?: Maybe<String[] | String>;
  stravaId_lt?: Maybe<String>;
  stravaId_lte?: Maybe<String>;
  stravaId_gt?: Maybe<String>;
  stravaId_gte?: Maybe<String>;
  stravaId_contains?: Maybe<String>;
  stravaId_not_contains?: Maybe<String>;
  stravaId_starts_with?: Maybe<String>;
  stravaId_not_starts_with?: Maybe<String>;
  stravaId_ends_with?: Maybe<String>;
  stravaId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistance_not?: Maybe<Float>;
  totalDistance_in?: Maybe<Float[] | Float>;
  totalDistance_not_in?: Maybe<Float[] | Float>;
  totalDistance_lt?: Maybe<Float>;
  totalDistance_lte?: Maybe<Float>;
  totalDistance_gt?: Maybe<Float>;
  totalDistance_gte?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  totalDistanceUnit_not?: Maybe<String>;
  totalDistanceUnit_in?: Maybe<String[] | String>;
  totalDistanceUnit_not_in?: Maybe<String[] | String>;
  totalDistanceUnit_lt?: Maybe<String>;
  totalDistanceUnit_lte?: Maybe<String>;
  totalDistanceUnit_gt?: Maybe<String>;
  totalDistanceUnit_gte?: Maybe<String>;
  totalDistanceUnit_contains?: Maybe<String>;
  totalDistanceUnit_not_contains?: Maybe<String>;
  totalDistanceUnit_starts_with?: Maybe<String>;
  totalDistanceUnit_not_starts_with?: Maybe<String>;
  totalDistanceUnit_ends_with?: Maybe<String>;
  totalDistanceUnit_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  durationUnit_not?: Maybe<String>;
  durationUnit_in?: Maybe<String[] | String>;
  durationUnit_not_in?: Maybe<String[] | String>;
  durationUnit_lt?: Maybe<String>;
  durationUnit_lte?: Maybe<String>;
  durationUnit_gt?: Maybe<String>;
  durationUnit_gte?: Maybe<String>;
  durationUnit_contains?: Maybe<String>;
  durationUnit_not_contains?: Maybe<String>;
  durationUnit_starts_with?: Maybe<String>;
  durationUnit_not_starts_with?: Maybe<String>;
  durationUnit_ends_with?: Maybe<String>;
  durationUnit_not_ends_with?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurned_not?: Maybe<Float>;
  totalEnergyBurned_in?: Maybe<Float[] | Float>;
  totalEnergyBurned_not_in?: Maybe<Float[] | Float>;
  totalEnergyBurned_lt?: Maybe<Float>;
  totalEnergyBurned_lte?: Maybe<Float>;
  totalEnergyBurned_gt?: Maybe<Float>;
  totalEnergyBurned_gte?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalEnergyBurnedUnit_not?: Maybe<String>;
  totalEnergyBurnedUnit_in?: Maybe<String[] | String>;
  totalEnergyBurnedUnit_not_in?: Maybe<String[] | String>;
  totalEnergyBurnedUnit_lt?: Maybe<String>;
  totalEnergyBurnedUnit_lte?: Maybe<String>;
  totalEnergyBurnedUnit_gt?: Maybe<String>;
  totalEnergyBurnedUnit_gte?: Maybe<String>;
  totalEnergyBurnedUnit_contains?: Maybe<String>;
  totalEnergyBurnedUnit_not_contains?: Maybe<String>;
  totalEnergyBurnedUnit_starts_with?: Maybe<String>;
  totalEnergyBurnedUnit_not_starts_with?: Maybe<String>;
  totalEnergyBurnedUnit_ends_with?: Maybe<String>;
  totalEnergyBurnedUnit_not_ends_with?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscent_not?: Maybe<Float>;
  totalAscent_in?: Maybe<Float[] | Float>;
  totalAscent_not_in?: Maybe<Float[] | Float>;
  totalAscent_lt?: Maybe<Float>;
  totalAscent_lte?: Maybe<Float>;
  totalAscent_gt?: Maybe<Float>;
  totalAscent_gte?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  totalAscentUnit_not?: Maybe<String>;
  totalAscentUnit_in?: Maybe<String[] | String>;
  totalAscentUnit_not_in?: Maybe<String[] | String>;
  totalAscentUnit_lt?: Maybe<String>;
  totalAscentUnit_lte?: Maybe<String>;
  totalAscentUnit_gt?: Maybe<String>;
  totalAscentUnit_gte?: Maybe<String>;
  totalAscentUnit_contains?: Maybe<String>;
  totalAscentUnit_not_contains?: Maybe<String>;
  totalAscentUnit_starts_with?: Maybe<String>;
  totalAscentUnit_not_starts_with?: Maybe<String>;
  totalAscentUnit_ends_with?: Maybe<String>;
  totalAscentUnit_not_ends_with?: Maybe<String>;
  sourceName?: Maybe<String>;
  sourceName_not?: Maybe<String>;
  sourceName_in?: Maybe<String[] | String>;
  sourceName_not_in?: Maybe<String[] | String>;
  sourceName_lt?: Maybe<String>;
  sourceName_lte?: Maybe<String>;
  sourceName_gt?: Maybe<String>;
  sourceName_gte?: Maybe<String>;
  sourceName_contains?: Maybe<String>;
  sourceName_not_contains?: Maybe<String>;
  sourceName_starts_with?: Maybe<String>;
  sourceName_not_starts_with?: Maybe<String>;
  sourceName_ends_with?: Maybe<String>;
  sourceName_not_ends_with?: Maybe<String>;
  AND?: Maybe<CyclingWorkoutWhereInput[] | CyclingWorkoutWhereInput>;
  OR?: Maybe<CyclingWorkoutWhereInput[] | CyclingWorkoutWhereInput>;
  NOT?: Maybe<CyclingWorkoutWhereInput[] | CyclingWorkoutWhereInput>;
}

export type RunningWorkoutWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RunningWorkoutWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stravaId?: Maybe<String>;
  stravaId_not?: Maybe<String>;
  stravaId_in?: Maybe<String[] | String>;
  stravaId_not_in?: Maybe<String[] | String>;
  stravaId_lt?: Maybe<String>;
  stravaId_lte?: Maybe<String>;
  stravaId_gt?: Maybe<String>;
  stravaId_gte?: Maybe<String>;
  stravaId_contains?: Maybe<String>;
  stravaId_not_contains?: Maybe<String>;
  stravaId_starts_with?: Maybe<String>;
  stravaId_not_starts_with?: Maybe<String>;
  stravaId_ends_with?: Maybe<String>;
  stravaId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistance_not?: Maybe<Float>;
  totalDistance_in?: Maybe<Float[] | Float>;
  totalDistance_not_in?: Maybe<Float[] | Float>;
  totalDistance_lt?: Maybe<Float>;
  totalDistance_lte?: Maybe<Float>;
  totalDistance_gt?: Maybe<Float>;
  totalDistance_gte?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  totalDistanceUnit_not?: Maybe<String>;
  totalDistanceUnit_in?: Maybe<String[] | String>;
  totalDistanceUnit_not_in?: Maybe<String[] | String>;
  totalDistanceUnit_lt?: Maybe<String>;
  totalDistanceUnit_lte?: Maybe<String>;
  totalDistanceUnit_gt?: Maybe<String>;
  totalDistanceUnit_gte?: Maybe<String>;
  totalDistanceUnit_contains?: Maybe<String>;
  totalDistanceUnit_not_contains?: Maybe<String>;
  totalDistanceUnit_starts_with?: Maybe<String>;
  totalDistanceUnit_not_starts_with?: Maybe<String>;
  totalDistanceUnit_ends_with?: Maybe<String>;
  totalDistanceUnit_not_ends_with?: Maybe<String>;
  duration?: Maybe<Float>;
  duration_not?: Maybe<Float>;
  duration_in?: Maybe<Float[] | Float>;
  duration_not_in?: Maybe<Float[] | Float>;
  duration_lt?: Maybe<Float>;
  duration_lte?: Maybe<Float>;
  duration_gt?: Maybe<Float>;
  duration_gte?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  durationUnit_not?: Maybe<String>;
  durationUnit_in?: Maybe<String[] | String>;
  durationUnit_not_in?: Maybe<String[] | String>;
  durationUnit_lt?: Maybe<String>;
  durationUnit_lte?: Maybe<String>;
  durationUnit_gt?: Maybe<String>;
  durationUnit_gte?: Maybe<String>;
  durationUnit_contains?: Maybe<String>;
  durationUnit_not_contains?: Maybe<String>;
  durationUnit_starts_with?: Maybe<String>;
  durationUnit_not_starts_with?: Maybe<String>;
  durationUnit_ends_with?: Maybe<String>;
  durationUnit_not_ends_with?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurned_not?: Maybe<Float>;
  totalEnergyBurned_in?: Maybe<Float[] | Float>;
  totalEnergyBurned_not_in?: Maybe<Float[] | Float>;
  totalEnergyBurned_lt?: Maybe<Float>;
  totalEnergyBurned_lte?: Maybe<Float>;
  totalEnergyBurned_gt?: Maybe<Float>;
  totalEnergyBurned_gte?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalEnergyBurnedUnit_not?: Maybe<String>;
  totalEnergyBurnedUnit_in?: Maybe<String[] | String>;
  totalEnergyBurnedUnit_not_in?: Maybe<String[] | String>;
  totalEnergyBurnedUnit_lt?: Maybe<String>;
  totalEnergyBurnedUnit_lte?: Maybe<String>;
  totalEnergyBurnedUnit_gt?: Maybe<String>;
  totalEnergyBurnedUnit_gte?: Maybe<String>;
  totalEnergyBurnedUnit_contains?: Maybe<String>;
  totalEnergyBurnedUnit_not_contains?: Maybe<String>;
  totalEnergyBurnedUnit_starts_with?: Maybe<String>;
  totalEnergyBurnedUnit_not_starts_with?: Maybe<String>;
  totalEnergyBurnedUnit_ends_with?: Maybe<String>;
  totalEnergyBurnedUnit_not_ends_with?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscent_not?: Maybe<Float>;
  totalAscent_in?: Maybe<Float[] | Float>;
  totalAscent_not_in?: Maybe<Float[] | Float>;
  totalAscent_lt?: Maybe<Float>;
  totalAscent_lte?: Maybe<Float>;
  totalAscent_gt?: Maybe<Float>;
  totalAscent_gte?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  totalAscentUnit_not?: Maybe<String>;
  totalAscentUnit_in?: Maybe<String[] | String>;
  totalAscentUnit_not_in?: Maybe<String[] | String>;
  totalAscentUnit_lt?: Maybe<String>;
  totalAscentUnit_lte?: Maybe<String>;
  totalAscentUnit_gt?: Maybe<String>;
  totalAscentUnit_gte?: Maybe<String>;
  totalAscentUnit_contains?: Maybe<String>;
  totalAscentUnit_not_contains?: Maybe<String>;
  totalAscentUnit_starts_with?: Maybe<String>;
  totalAscentUnit_not_starts_with?: Maybe<String>;
  totalAscentUnit_ends_with?: Maybe<String>;
  totalAscentUnit_not_ends_with?: Maybe<String>;
  sourceName?: Maybe<String>;
  sourceName_not?: Maybe<String>;
  sourceName_in?: Maybe<String[] | String>;
  sourceName_not_in?: Maybe<String[] | String>;
  sourceName_lt?: Maybe<String>;
  sourceName_lte?: Maybe<String>;
  sourceName_gt?: Maybe<String>;
  sourceName_gte?: Maybe<String>;
  sourceName_contains?: Maybe<String>;
  sourceName_not_contains?: Maybe<String>;
  sourceName_starts_with?: Maybe<String>;
  sourceName_not_starts_with?: Maybe<String>;
  sourceName_ends_with?: Maybe<String>;
  sourceName_not_ends_with?: Maybe<String>;
  AND?: Maybe<RunningWorkoutWhereInput[] | RunningWorkoutWhereInput>;
  OR?: Maybe<RunningWorkoutWhereInput[] | RunningWorkoutWhereInput>;
  NOT?: Maybe<RunningWorkoutWhereInput[] | RunningWorkoutWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  stravaId?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  stravaId?: Maybe<String>;
  stravaId_not?: Maybe<String>;
  stravaId_in?: Maybe<String[] | String>;
  stravaId_not_in?: Maybe<String[] | String>;
  stravaId_lt?: Maybe<String>;
  stravaId_lte?: Maybe<String>;
  stravaId_gt?: Maybe<String>;
  stravaId_gte?: Maybe<String>;
  stravaId_contains?: Maybe<String>;
  stravaId_not_contains?: Maybe<String>;
  stravaId_starts_with?: Maybe<String>;
  stravaId_not_starts_with?: Maybe<String>;
  stravaId_ends_with?: Maybe<String>;
  stravaId_not_ends_with?: Maybe<String>;
  stravaUsername?: Maybe<String>;
  stravaUsername_not?: Maybe<String>;
  stravaUsername_in?: Maybe<String[] | String>;
  stravaUsername_not_in?: Maybe<String[] | String>;
  stravaUsername_lt?: Maybe<String>;
  stravaUsername_lte?: Maybe<String>;
  stravaUsername_gt?: Maybe<String>;
  stravaUsername_gte?: Maybe<String>;
  stravaUsername_contains?: Maybe<String>;
  stravaUsername_not_contains?: Maybe<String>;
  stravaUsername_starts_with?: Maybe<String>;
  stravaUsername_not_starts_with?: Maybe<String>;
  stravaUsername_ends_with?: Maybe<String>;
  stravaUsername_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  accessToken?: Maybe<String>;
  accessToken_not?: Maybe<String>;
  accessToken_in?: Maybe<String[] | String>;
  accessToken_not_in?: Maybe<String[] | String>;
  accessToken_lt?: Maybe<String>;
  accessToken_lte?: Maybe<String>;
  accessToken_gt?: Maybe<String>;
  accessToken_gte?: Maybe<String>;
  accessToken_contains?: Maybe<String>;
  accessToken_not_contains?: Maybe<String>;
  accessToken_starts_with?: Maybe<String>;
  accessToken_not_starts_with?: Maybe<String>;
  accessToken_ends_with?: Maybe<String>;
  accessToken_not_ends_with?: Maybe<String>;
  refreshToken?: Maybe<String>;
  refreshToken_not?: Maybe<String>;
  refreshToken_in?: Maybe<String[] | String>;
  refreshToken_not_in?: Maybe<String[] | String>;
  refreshToken_lt?: Maybe<String>;
  refreshToken_lte?: Maybe<String>;
  refreshToken_gt?: Maybe<String>;
  refreshToken_gte?: Maybe<String>;
  refreshToken_contains?: Maybe<String>;
  refreshToken_not_contains?: Maybe<String>;
  refreshToken_starts_with?: Maybe<String>;
  refreshToken_not_starts_with?: Maybe<String>;
  refreshToken_ends_with?: Maybe<String>;
  refreshToken_not_ends_with?: Maybe<String>;
  accessTokenExpiresAt?: Maybe<Int>;
  accessTokenExpiresAt_not?: Maybe<Int>;
  accessTokenExpiresAt_in?: Maybe<Int[] | Int>;
  accessTokenExpiresAt_not_in?: Maybe<Int[] | Int>;
  accessTokenExpiresAt_lt?: Maybe<Int>;
  accessTokenExpiresAt_lte?: Maybe<Int>;
  accessTokenExpiresAt_gt?: Maybe<Int>;
  accessTokenExpiresAt_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CyclingWorkoutCreateInput {
  id?: Maybe<ID_Input>;
  stravaId: String;
  userId: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  totalDistance: Float;
  totalDistanceUnit?: Maybe<String>;
  duration: Float;
  durationUnit?: Maybe<String>;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent: Float;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface CyclingWorkoutUpdateInput {
  stravaId?: Maybe<String>;
  userId?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  duration?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface CyclingWorkoutUpdateManyMutationInput {
  stravaId?: Maybe<String>;
  userId?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  duration?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface RunningWorkoutCreateInput {
  id?: Maybe<ID_Input>;
  stravaId: String;
  userId: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  totalDistance: Float;
  totalDistanceUnit?: Maybe<String>;
  duration: Float;
  durationUnit?: Maybe<String>;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface RunningWorkoutUpdateInput {
  stravaId?: Maybe<String>;
  userId?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  duration?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface RunningWorkoutUpdateManyMutationInput {
  stravaId?: Maybe<String>;
  userId?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalDistance?: Maybe<Float>;
  totalDistanceUnit?: Maybe<String>;
  duration?: Maybe<Float>;
  durationUnit?: Maybe<String>;
  totalEnergyBurned?: Maybe<Float>;
  totalEnergyBurnedUnit?: Maybe<String>;
  totalAscent?: Maybe<Float>;
  totalAscentUnit?: Maybe<String>;
  sourceName?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  stravaId: String;
  stravaUsername: String;
  firstName: String;
  lastName: String;
  sex: String;
  accessToken: String;
  refreshToken: String;
  accessTokenExpiresAt: Int;
}

export interface UserUpdateInput {
  stravaId?: Maybe<String>;
  stravaUsername?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sex?: Maybe<String>;
  accessToken?: Maybe<String>;
  refreshToken?: Maybe<String>;
  accessTokenExpiresAt?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  stravaId?: Maybe<String>;
  stravaUsername?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sex?: Maybe<String>;
  accessToken?: Maybe<String>;
  refreshToken?: Maybe<String>;
  accessTokenExpiresAt?: Maybe<Int>;
}

export interface CyclingWorkoutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CyclingWorkoutWhereInput>;
  AND?: Maybe<
    | CyclingWorkoutSubscriptionWhereInput[]
    | CyclingWorkoutSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CyclingWorkoutSubscriptionWhereInput[]
    | CyclingWorkoutSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CyclingWorkoutSubscriptionWhereInput[]
    | CyclingWorkoutSubscriptionWhereInput
  >;
}

export interface RunningWorkoutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RunningWorkoutWhereInput>;
  AND?: Maybe<
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput
  >;
  OR?: Maybe<
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | RunningWorkoutSubscriptionWhereInput[]
    | RunningWorkoutSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface CyclingWorkout {
  id: ID_Output;
  stravaId: String;
  createdAt: DateTimeOutput;
  userId: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent: Float;
  totalAscentUnit: String;
  sourceName?: String;
}

export interface CyclingWorkoutPromise
  extends Promise<CyclingWorkout>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface CyclingWorkoutSubscription
  extends Promise<AsyncIterator<CyclingWorkout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

export interface CyclingWorkoutNullablePromise
  extends Promise<CyclingWorkout | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface CyclingWorkoutConnection {
  pageInfo: PageInfo;
  edges: CyclingWorkoutEdge[];
}

export interface CyclingWorkoutConnectionPromise
  extends Promise<CyclingWorkoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CyclingWorkoutEdge>>() => T;
  aggregate: <T = AggregateCyclingWorkoutPromise>() => T;
}

export interface CyclingWorkoutConnectionSubscription
  extends Promise<AsyncIterator<CyclingWorkoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CyclingWorkoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCyclingWorkoutSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CyclingWorkoutEdge {
  node: CyclingWorkout;
  cursor: String;
}

export interface CyclingWorkoutEdgePromise
  extends Promise<CyclingWorkoutEdge>,
    Fragmentable {
  node: <T = CyclingWorkoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CyclingWorkoutEdgeSubscription
  extends Promise<AsyncIterator<CyclingWorkoutEdge>>,
    Fragmentable {
  node: <T = CyclingWorkoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCyclingWorkout {
  count: Int;
}

export interface AggregateCyclingWorkoutPromise
  extends Promise<AggregateCyclingWorkout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCyclingWorkoutSubscription
  extends Promise<AsyncIterator<AggregateCyclingWorkout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RunningWorkout {
  id: ID_Output;
  stravaId: String;
  createdAt: DateTimeOutput;
  userId: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutPromise
  extends Promise<RunningWorkout>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface RunningWorkoutSubscription
  extends Promise<AsyncIterator<RunningWorkout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

export interface RunningWorkoutNullablePromise
  extends Promise<RunningWorkout | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface RunningWorkoutConnection {
  pageInfo: PageInfo;
  edges: RunningWorkoutEdge[];
}

export interface RunningWorkoutConnectionPromise
  extends Promise<RunningWorkoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RunningWorkoutEdge>>() => T;
  aggregate: <T = AggregateRunningWorkoutPromise>() => T;
}

export interface RunningWorkoutConnectionSubscription
  extends Promise<AsyncIterator<RunningWorkoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RunningWorkoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRunningWorkoutSubscription>() => T;
}

export interface RunningWorkoutEdge {
  node: RunningWorkout;
  cursor: String;
}

export interface RunningWorkoutEdgePromise
  extends Promise<RunningWorkoutEdge>,
    Fragmentable {
  node: <T = RunningWorkoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RunningWorkoutEdgeSubscription
  extends Promise<AsyncIterator<RunningWorkoutEdge>>,
    Fragmentable {
  node: <T = RunningWorkoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRunningWorkout {
  count: Int;
}

export interface AggregateRunningWorkoutPromise
  extends Promise<AggregateRunningWorkout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRunningWorkoutSubscription
  extends Promise<AsyncIterator<AggregateRunningWorkout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  stravaId: String;
  stravaUsername: String;
  firstName: String;
  lastName: String;
  sex: String;
  accessToken: String;
  refreshToken: String;
  accessTokenExpiresAt: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  stravaId: () => Promise<String>;
  stravaUsername: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sex: () => Promise<String>;
  accessToken: () => Promise<String>;
  refreshToken: () => Promise<String>;
  accessTokenExpiresAt: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  stravaUsername: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  accessTokenExpiresAt: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  stravaId: () => Promise<String>;
  stravaUsername: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sex: () => Promise<String>;
  accessToken: () => Promise<String>;
  refreshToken: () => Promise<String>;
  accessTokenExpiresAt: () => Promise<Int>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CyclingWorkoutSubscriptionPayload {
  mutation: MutationType;
  node: CyclingWorkout;
  updatedFields: String[];
  previousValues: CyclingWorkoutPreviousValues;
}

export interface CyclingWorkoutSubscriptionPayloadPromise
  extends Promise<CyclingWorkoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CyclingWorkoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CyclingWorkoutPreviousValuesPromise>() => T;
}

export interface CyclingWorkoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CyclingWorkoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CyclingWorkoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CyclingWorkoutPreviousValuesSubscription>() => T;
}

export interface CyclingWorkoutPreviousValues {
  id: ID_Output;
  stravaId: String;
  createdAt: DateTimeOutput;
  userId: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent: Float;
  totalAscentUnit: String;
  sourceName?: String;
}

export interface CyclingWorkoutPreviousValuesPromise
  extends Promise<CyclingWorkoutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface CyclingWorkoutPreviousValuesSubscription
  extends Promise<AsyncIterator<CyclingWorkoutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

export interface RunningWorkoutSubscriptionPayload {
  mutation: MutationType;
  node: RunningWorkout;
  updatedFields: String[];
  previousValues: RunningWorkoutPreviousValues;
}

export interface RunningWorkoutSubscriptionPayloadPromise
  extends Promise<RunningWorkoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RunningWorkoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RunningWorkoutPreviousValuesPromise>() => T;
}

export interface RunningWorkoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RunningWorkoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RunningWorkoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RunningWorkoutPreviousValuesSubscription>() => T;
}

export interface RunningWorkoutPreviousValues {
  id: ID_Output;
  stravaId: String;
  createdAt: DateTimeOutput;
  userId: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalDistance: Float;
  totalDistanceUnit: String;
  duration: Float;
  durationUnit: String;
  totalEnergyBurned: Float;
  totalEnergyBurnedUnit: String;
  totalAscent?: Float;
  totalAscentUnit?: String;
  sourceName?: String;
}

export interface RunningWorkoutPreviousValuesPromise
  extends Promise<RunningWorkoutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stravaId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalDistance: () => Promise<Float>;
  totalDistanceUnit: () => Promise<String>;
  duration: () => Promise<Float>;
  durationUnit: () => Promise<String>;
  totalEnergyBurned: () => Promise<Float>;
  totalEnergyBurnedUnit: () => Promise<String>;
  totalAscent: () => Promise<Float>;
  totalAscentUnit: () => Promise<String>;
  sourceName: () => Promise<String>;
}

export interface RunningWorkoutPreviousValuesSubscription
  extends Promise<AsyncIterator<RunningWorkoutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalDistance: () => Promise<AsyncIterator<Float>>;
  totalDistanceUnit: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Float>>;
  durationUnit: () => Promise<AsyncIterator<String>>;
  totalEnergyBurned: () => Promise<AsyncIterator<Float>>;
  totalEnergyBurnedUnit: () => Promise<AsyncIterator<String>>;
  totalAscent: () => Promise<AsyncIterator<Float>>;
  totalAscentUnit: () => Promise<AsyncIterator<String>>;
  sourceName: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  stravaId: String;
  stravaUsername: String;
  firstName: String;
  lastName: String;
  sex: String;
  accessToken: String;
  refreshToken: String;
  accessTokenExpiresAt: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  stravaId: () => Promise<String>;
  stravaUsername: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sex: () => Promise<String>;
  accessToken: () => Promise<String>;
  refreshToken: () => Promise<String>;
  accessTokenExpiresAt: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stravaId: () => Promise<AsyncIterator<String>>;
  stravaUsername: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  accessTokenExpiresAt: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "RunningWorkout",
    embedded: false
  },
  {
    name: "CyclingWorkout",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
